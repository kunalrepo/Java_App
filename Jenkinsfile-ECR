@Library('my-shared-library') _

pipeline {
    agent any

    parameters {
        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'aws_account_id', description: "AWS Account ID", defaultValue: '967427159842')
        string(name: 'Region', description: "Region of ECR", defaultValue: 'ap-south-1')
        string(name: 'ecr_repoName', description: "Name of the ECR", defaultValue: 'kunaldokerclub')
    }

    environment {
        ACCESS_KEY = credentials('AWS_Creds').username
        SECRET_KEY = credentials('AWS_Creds').password
    }

    stages {
        stage('Git Checkout: GitHub') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    gitCheckout(branch: "main", url: "https://github.com/kunalrepo/Java_App.git")
                }
            }
        }

        stage('Unit Test: Maven') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    mvnTest()
                }
            }
        }

        stage('Integration Test: Maven') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    mvnIntegrationTest()
                }
            }
        }

        stage('Static Code Analysis: Sonarqube') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    def SonarQubecredentialsId = 'sonar-api1'
                    staticCodeAnalysis(SonarQubecredentialsId)
                }
            }
        }

        stage('Quality Gate Status Check: Sonarqube') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    def SonarQubecredentialsId = 'sonar-api1'
                    qualityGateStatus(SonarQubecredentialsId)
                }
            }
        }

        stage('Maven Build: Maven') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    mvnBuild()
                }
            }
        }

        stage('Docker Image Build: AWS ECR') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    dockerBuild("${params.aws_account_id}", "${params.Region}", "${params.ecr_repoName}")
                }
            }
        }

        stage('Docker Image Scan: Trivy') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    dockerImageScan("${params.aws_account_id}", "${params.Region}", "${params.ecr_repoName}")
                }
            }
        }

        stage('Docker Image Push: AWS ECR') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'AWS_Creds', variable: 'AWS_ACCESS_KEY'),
                        string(credentialsId: 'AWS_Creds', variable: 'AWS_SECRET_KEY')
                    ]) {
                        dockerImagePush(env.AWS_ACCESS_KEY, env.AWS_SECRET_KEY, "${params.Region}", "${params.ecr_repoName}")
                    }
                }
            }
        }

        stage('Docker Image Cleanup: AWS ECR') {
            when {
                expression { params.action == 'create' }
            }
            steps {
                script {
                    dockerImageCleanup("${params.aws_account_id}", "${params.Region}", "${params.ecr_repoName}")
                }
            }
        }
    }
}
